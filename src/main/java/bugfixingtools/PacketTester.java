package bugfixingtools;

import packets.Packet;
import packets.PacketType;
import packets.packetcapture.encryption.RC4;
import packets.packetcapture.encryption.RotMGRC4Keys;
import packets.packetcapture.encryption.TickAligner;
import packets.packetcapture.sniff.RingBuffer;
import packets.packetcapture.sniff.assembly.Ip4Defragmenter;
import packets.packetcapture.sniff.netpackets.Ip4Packet;
import packets.packetcapture.sniff.netpackets.RawPacket;
import packets.packetcapture.sniff.netpackets.TcpPacket;
import packets.packetcapture.sniff.netpackets.EthernetPacket;
import packets.reader.BufferReader;
import util.Util;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


public class PacketTester {
    static final String FILE_NAME = "error/2022-06-07-15.13.07.data";
    private static boolean incoming = true;

    public static void main(String[] args) {
        System.out.println("clearconsole");
        try {
            Util.setSaveLogs(false);
//            new PacketTester().crunch();
            new PacketTester().errorSimulator();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void crunch() {
//        String s = "";
        String s = "[0, 0, 0, -97, 101, 108, -94, 0, -44, -48, 41, 45, -117, 13, -61, 42, -61, 59, 21, 3, 9, -114, -85, -109, -5, -19, 123, -56, 102, -69, -101, 121, -24, -73, -23, 0, 99, -114, 88, 26, 18, -32, 97, 98, 41, 107, 30, -68, 45, -50, -66, -26, -80, -22, -94, 10, 85, 14, 89, 75, -22, -105, 94, -35, -27, -81, 39, 68, -112, -95, 111, 106, 86, 85, 80, -3, 54, -10, 73, 50, -92, -111, 13, 29, -117, -7, -48, 96, 19, 103, 57, -32, -91, -103, 97, 121, 56, -4, -59, 55, 127, 48, 1, -70, -103, 86, -91, 66, 98, 53, 2, 28, -128, -30, 39, 15, -31, 103, 41, -59, 16, 94, -76, 122, 15, -99, -1, -60, 44, -113, 23, -85, 83, 84, -21, -108, 16, 54, 97, -12, -100, 31, 2, -35, -47, 41, -119, -13, 101, 13, 40, -17, -51, -1, -77, 126, -25, 34, 120]";
        String s2 = "[0, 0, 0, -97, 101, 21, 8, 26, -122, 120, -84, -22, 43, -123, 47, -83, -112, 30, -31, 106, 67, 55, 68, -40, -33, 66, -9, 33, 47, 66, -39, 88, 13, -4, -95, -62, -18, -17, 5, 55, 2, 72, 52, -23, -13, -6, -60, 29, 99, 11, 32, 38, 109, -7, 6, -21, -121, -56, -117, -6, 25, 87, -29, 1, -97, 103, 13, -2, 69, 96, -83, -20, 36, 106, -98, -86, 90, 85, 63, -18, 116, -72, 34, -28, -122, -86, -66, -59, 107, 6, 79, -104, 100, 106, -63, -35, -19, -43, 98, 19, -99, -97, 57, 13, 29, -113, -4, 96, -83, 44, 89, 79, 35, -57, 125, 73, -37, 59, -26, -121, -67, -79, 56, -91, -118, 125, -97, -50, 109, -82, 31, 11, -89, 68, 92, 48, -12, 101, 73, 37, 88, 39, 60, -22, -73, 51, 53, -97, -54, 7, 115, 60, 25, -72, -38, -110, 119, -107, 89]";
//        String s = "[0, 0, 0, -97, 101, 108, -94, 30, -36, -48, 41, 45, -117, 13, -61, 42, -61, 59, 21, 3, 9, -114, -85, -109, -5, -19, 123, -56, 102, -69, -101, 121, -24, -73, -23, 0, 99, -114, 88, 26, 18, -32, 19, 98, 31, 107, 30, -68, 45, -50, -66, -26, -80, -22, -94, 17, 122, 108, 89, 75, -22, -105, 94, -35, -27, -81, 39, 68, -112, -95, 111, 106, 86, 85, 80, -3, 54, -10, 73, 50, -92, -111, 13, 29, -117, -7, -48, 96, 19, 103, 57, -32, -91, -103, 97, 121, 56, -4, -59, 55, 127, 48, 1, -70, -103, 86, -91, 66, 98, 53, 2, 28, -128, -30, 39, 15, -31, 103, 41, -59, 16, 94, -76, 122, 15, -99, -1, -60, 44, -113, 23, -85, 83, 84, -21, -108, 16, 54, 97, -12, -100, 31, 2, -35, -47, 41, -119, -13, 101, 13, 40, -17, -51, -1, -77, 126, -25, 34, 120]";
//        String s = "[0, 0, 0, -97, 101, 108, -94, -9, 99, -48, 41, 45, -117, 13, -61, 42, -61, 59, 21, 3, 9, -114, -85, -109, -5, -19, 123, -56, 102, -77, -101, 121, -24, -73, -23, 0, 99, -114, 88, 26, 18, -32, 77, 107, 31, 119, 30, -96, 111, -38, -65, -6, -21, -26, -94, 18, 126, 2, 72, 75, -22, -71, 94, -35, -27, -81, 4, 65, -112, -95, 15, 106, 126, 46, 83, -3, 54, -6, 73, 50, -92, -111, 13, 26, -83, -7, -47, 96, 19, 99, 58, -32, -91, -103, 97, 96, 56, -4, -59, 55, 127, 48, 1, -70, -103, 86, -91, 66, 98, 41, 5, 31, -112, -14, 35, 10, -30, 10, 55, -59, 16, 78, -77, 86, 34, -10, -35, -17, 46, -105, 49, -104, 10, 70, -36, -91, 31, 55, 79, -46, -109, 68, 55, -17, -1, 60, -127, -45, 0, 61, 47, -47, -23, -4, -70, 9, -25, 90, 120]";
//        String s = "[0, 0, 0, 44, 62, 105, 124, -43, 94, -16, 121, -95, 0, -37, 63, 38, -44, -26, 90, 22, -58, 112, -36, -34, -105, 123, 125, -24, 124, -89, -102, 94, -65, 64, -76, 104, -113, -8, 90, 22, 118, 63, -121, 44]";
//        String s = "[0, 0, 19, -62, 62, 24, 105, -82, -11, -25, 37, -83, 91, -50, -27, 6, 24, 39, 75, 46, 75, 60, -8, -44, 116, 32, -122, 12, 2, -91, -4, 104, -4, 114, 9, -114, 60, -78, -56, -117, -50, -85, -43, -1, 75, -79, -57, 95, 12, -60, -85, 26, 52, 38, -95, 118, 46, 34, -15, 31, 105, 116, 60, 23, -126, 43, -92, -65, 77, 28, 50, 52, -77, 100, 33, -10, 115, 85, -81, 101, -45, -3, -69, -58, -59, 59, -21, -18, -24, -75, -77, 26, -108, -57, -72, 89, 72, 73, -45, 122, 42, 33, 20, -28, -121, 81, -50, 41, -30, 45, -106, 32, 14, 20, -51, 110, 72, -105, 64, -106, 5, 119, 68, 73, -128, 46, -69, -66, 95, -1, -6, 126, 19, -55, 58, -53, 92, -112, 106, 114, 50, 55, 81, 77, -117, -70, 89, 123, -26, -79, -74, 84, -18, 40, -94, -124, 107, 24, 11, -14, -16, 97, 87, 97, -112, -104, 53, 44, -101, -72, -104, 121, -105, 39, -95, 112, 100, 64, 41, -117, 98, -84, 66, -72, 124, 26, 108, -107, 1, 71, 20, -108, 57, -46, 38, 124, -2, -90, -17, 12, -116, 8, 76, 86, -92, 69, 69, -121, 53, -23, 6, -37, -89, -71, 107, 2, -128, -26, 6, 46, 115, -117, -111, -32, 110, 119, -111, 42, -123, 1, 57, 7, 58, -70, 93, -12, -22, -80, -70, -81, 72, -40, 93, -82, 119, 35, 9, 94, -122, -87, -47, 72, 71, -6, 37, 84, -44, 40, -68, 100, 76, -105, 53, 13, 70, 87, -107, -28, -38, -84, 56, 114, 88, 45, 20, 79, -81, 112, 66, 80, 110, 119, 6, -17, 84, -125, 122, -68, -61, -121, -73, 71, -123, -111, 98, 103, 111, -8, -113, 11, 104, 68, 107, -23, -81, 93, -109, 70, 82, 26, 68, -29, -4, 19, 17, -118, -93, -15, 98, -75, 88, 79, 107, -89, 92, 31, 70, -88, 118, -20, 6, -24, 63, -109, 81, -17, 26, -77, 63, 126, 118, -2, 40, 111, -21, -120, -15, 113, -58, 117, 109, -51, -96, 102, 35, -35, 74, 108, 73, 57, -86, 89, 9, -105, -42, 93, 77, -77, 20, 7, -29, -57, 90, -16, 30, 110, -20, 4, 126, 7, -47, 75, -96, 126, -109, -117, -6, -59, 7, -106, -46, 78, -108, -115, 48, 19, -98, -17, 92, 53, -100, 107, -69, -85, 109, -74, -86, 126, 106, 78, 115, -32, -66, -21, 85, 35, -120, 26, -38, -81, 15, -44, -115, -24, -122, -112, 8, 60, -25, -74, 4, 126, 83, 108, 60, 122, 77, -50, 2, 40, -101, -30, -32, 83, -29, 76, 49, -21, 74, -119, -108, 57, -68, 114, 108, -15, -3, -27, 24, -128, -78, 79, 1, -42, 121, 20, 6, -109, -126, -112, -121, -125, 16, -49, -59, 47, -50, -119, -68, -14, 58, -79, -56, -48, 83, -14, 31, 32, 118, -100, 114, 41, 73, -117, 8, -121, 32, 60, -98, -48, -103, 86, 125, 76, -26, -47, -49, -3, 44, 87, -2, -2, 70, 17, -67, -6, -85, -68, 59, -15, 89, 27, -124, -47, 127, -2, -16, -80, 107, -126, 52, -68, 77, -108, -106, -94, -123, -67, 37, -85, -103, 12, -27, -91, 35, -103, 122, 52, -31, -101, -17, 17, 120, -9, -45, -104, -19, 31, 84, 9, 125, 106, 89, -99, -24, 61, -51, -57, 95, -13, -121, 9, 30, 119, -6, 7, 57, 26, 8, 108, -68, 12, 62, -86, 70, -119, 27, 75, -61, 98, -71, -125, -15, 72, 96, -59, -82, 43, 124, 5, 99, 115, -55, 77, -47, 38, -32, -24, -16, -30, 123, 42, -109, -124, -60, -124, -104, -69, -39, 104, -70, 100, 104, 118, 7, -37, 124, 96, 17, 81, -37, 19, 125, -93, 104, -127, -110, 5, 115, -29, 77, 86, 55, 40, -27, -67, -83, -8, -109, -28, -51, 76, 111, -105, 11, -1, 17, -77, -19, -92, -7, 63, 35, 88, 57, 115, 26, -124, -2, -117, 109, -84, 28, 107, -25, -46, 72, 102, 91, 107, 54, 48, 38, -100, 123, 57, -113, -31, -117, 30, 119, -42, 83, 27, -2, 31, 80, 23, -92, 22, 9, 7, 80, -122, 31, 63, 121, -3, 33, 43, -91, -83, 6, -54, 64, -20, 75, 42, 28, -57, 19, -110, -101, 84, -34, 112, -107, -125, -32, 33, 70, 38, -50, -102, -124, 60, 34, 101, 49, 49, -96, -85, -57, -72, 32, 40, -59, -38, -3, 49, -8, 89, -85, 26, 111, 28, 81, 105, -102, 109, 64, -36, 40, 1, 66, 126, 112, -16, -36, -89, -57, -118, -96, 6, 0, -68, 67, 65, -118, -82, -27, -98, 123, 22, 114, 119, -48, -16, 7, -18, 61, -117, 21, 94, -53, 67, -99, 56, -90, -58, 8, 74, 50, 119, 13, -8, 64, 107, -84, -51, 13, -3, -85, 64, 48, -120, -45, -38, 100, 56, 32, 18, 30, -57, 83, 18, 5, -104, -35, 112, 16, -109, 115, 64, 120, 97, 23, 115, -36, 102, -31, 80, 80, -124, -55, -111, 34, -106, -100, 40, -14, -25, -22, -31, -61, 45, -107, -94, 119, -8, 121, 88, 19, 75, -67, -70, 45, -61, -26, 100, -80, 69, 41, 80, -109, 94, 60, 27, 112, -17, -10, 15, -25, -111, -63, 46, 40, -31, 125, 39, -104, -74, -46, 41, 30, -68, 100, -108, 5, -82, -104, 6, 36, 16, -75, 91, -76, 68, 27, -35, 46, -49, -39, 49, -77, -118, -87, 57, 74, -118, 61, 45, -53, -10, 72, -2, -17, -127, -108, 47, -2, -96, 52, 5, -2, 80, 42, -109, 89, -56, -106, -36, 62, -94, -14, 0, -61, -89, -85, -88, 113, 102, -104, -108, -78, 109, -88, 84, 125, -77, 10, 59, 61, -41, 90, 97, -117, -34, 15, 64, 14, -102, 54, -50, 62, -102, -35, 119, -22, -37, 84, -41, 43, -53, 88, -64, 64, 120, -71, -8, 26, 80, 45, 2, -23, -30, -70, -82, -56, -101, -43, -123, 72, 22, -32, 80, 26, 74, 51, -86, -29, 123, 2, 66, 80, 82, -31, 125, -49, -50, -119, 111, -103, 17, 119, 47, -118, -43, -64, -122, 22, 20, -119, 6, -85, -35, 110, -79, 3, -15, -10, 94, 25, -110, 69, -125, -38, 16, 71, 81, -103, -123, 97, 15, 58, -45, -14, -58, -20, -105, -128, -26, 41, -122, -99, -7, -63, 122, -46, -54, 91, 126, 10, -85, 76, 67, -47, 126, 90, -102, 36, -64, -41, 94, 34, 119, 117, 56, -7, -81, -18, -98, -107, 59, -90, -3, 0, 90, 16, -41, -88, -128, -102, -8, -14, -78, 96, 103, 86, 77, -109, -109, -28, 86, -114, 8, -31, -25, -81, -3, -121, 76, 85, -73, 33, -20, 97, 9, 31, -85, -128, 38, 28, 86, -39, -113, 95, 9, -63, -87, -60, -108, 71, -102, 1, -63, -100, 24, 14, 6, 10, -71, -99, 26, -63, -56, -88, 96, -13, -113, -127, -41, 12, 43, -105, -75, -24, -16, 33, -39, 104, 103, 18, 93, -1, -112, -121, 119, 84, -77, -25, 8, 56, -109, 120, -11, -51, -22, 116, -24, -93, 72, 3, -5, -21, -12, -120, 43, -51, 33, -2, -63, 116, 119, 47, 51, -1, 50, 31, 89, -112, 97, 36, -82, 95, -38, -124, -87, -67, -17, 26, 74, -124, -51, 19, -90, -17, 57, 79, -46, 11, 71, 103, -31, 7, 107, 74, -34, -11, 42, 59, -46, -117, 5, -87, -67, -42, -57, -126, 88, -13, -68, -68, -20, -42, 100, -22, -18, 22, -115, 43, 112, -121, 72, -114, 5, -13, -5, -89, -92, -29, 43, 36, 111, 4, -114, 55, 108, 32, -5, -74, 35, -25, -67, -99, -118, -17, 37, 35, 11, -23, -92, 32, -83, 100, 97, 11, 3, -18, 100, 52, 116, -11, -91, -61, -64, 43, -110, -98, 105, 123, -105, 20, -40, 83, 32, 21, -128, -20, 119, -4, -37, 12, 35, 109, 76, 97, -36, 72, -120, 74, 32, 40, 35, -15, -122, -97, -7, 15, 84, -114, 85, 3, -81, 118, 93, -128, -49, -107, -126, -105, 33, -92, 115, -51, -108, 114, 53, -104, -111, -74, -107, 63, 13, -119, 10, 16, -91, 49, 63, -122, 106, -3, 69, 70, -62, 115, 72, 13, -2, -87, 45, -125, -116, -122, 50, -71, 111, 108, 79, -67, -54, -115, -48, -88, -49, 47, -62, 24, 3, 12, 12, -19, 127, -108, 14, 111, -33, -24, -94, -50, 49, -14, -107, 53, 94, 76, 1, 13, -106, -110, 14, 13, 65, -55, 92, -24, -41, 65, 62, 57, 117, -55, -123, 72, -21, -114, -46, 49, 23, -76, -91, -11, -67, 94, -52, 26, 110, 15, 3, -77, 6, 25, -29, 99, 92, -113, -53, -58, -51, 36, -85, -3, 110, 125, 19, 57, -93, 73, -75, -69, 87, -58, -9, 56, 21, 82, -48, -103, 68, 108, 103, 96, 56, 7, -24, -75, -2, 6, 85, 39, -62, -63, -103, -52, 67, -54, 117, -83, -127, 61, -107, -72, -49, 117, -59, 119, -97, -111, 20, -41, 31, 29, 98, -61, -99, -83, -98, 4, 85, -108, 8, -62, 56, -14, -109, -71, 60, 52, 54, -85, -59, -90, 78, -69, 122, 115, 62, -38, 77, -94, 86, 70, 94, 126, -50, -105, 19, 83, -29, -100, 91, -17, 88, 103, -36, 93, 124, 19, 64, -24, 54, -104, 123, -5, -33, 85, 39, 87, -72, -36, 45, -33, 123, 102, 59, -81, 14, 10, -121, 49, -38, -2, -45, -26, -18, -109, -78, -53, 86, -6, 61, -57, -37, -70, 82, -23, 41, 87, -126, -29, 14, -54, 39, -89, 97, 111, -107, 1, 82, -8, -15, 17, 52, 39, -48, 69, -84, -54, 43, 111, -43, 121, -14, 103, -115, -20, 107, -70, -113, -71, 35, 34, -38, -32, -86, -20, 71, 62, 28, 88, -100, 86, 33, -8, -43, 126, -3, -89, 63, 6, -76, 98, -63, 100, 21, -14, -74, 127, -109, -72, 35, -114, 43, -76, -1, -67, 33, -1, 40, 30, 84, -99, -22, -14, 76, -60, -65, -6, -56, 79, 82, 71, 68, -79, 61, -68, -100, -116, 117, 21, -38, 107, -47, 70, 25, -77, 18, 121, 80, -24, -6, 61, 39, 124, -113, -56, 127, -11, -59, 46, -30, 26, 108, 56, 69, 75, 47, 51, -34, -37, -128, -43, 66, 40, 29, 43, -108, -100, -65, -38, 120, 78, -118, -99, 3, -94, -48, -125, -12, -122, 47, 35, -95, -103, 55, 60, -40, -126, 53, -12, -17, -99, -85, 36, -45, 79, -81, 19, -74, 114, 10, -111, -34, -44, 71, -8, 100, -86, 12, 47, 42, -67, 24, -89, 86, -78, -112, -57, 57, 50, 18, 97, 105, 120, -104, 5, 82, -71, -108, -33, -54, 96, -29, 126, 33, -30, -13, 76, 116, 50, 32, -54, 122, -14, -85, -55, -87, -77, -25, 86, -109, -54, 5, -106, 20, -91, 107, 58, 34, 44, 67, 0, 82, -91, -60, 18, 53, -48, 106, 102, 90, 47, 76, 44, -90, 106, -59, -105, -103, 59, 6, -11, 126, 78, 85, -90, -79, 85, -48, 84, -116, 120, 90, 23, 81, 73, 60, -70, -1, -106, 56, -81, -112, 65, -104, -15, 34, 109, 13, -59, 69, 37, -96, 53, 14, 6, 74, 75, -39, -60, -37, 106, -74, 99, 118, -63, 125, 114, 4, 106, -69, -107, -54, 87, 37, 18, 73, 21, 89, -72, 59, 8, 20, -1, -84, 4, -73, 23, -94, 75, 9, -111, 50, 31, -70, 28, -51, 85, 10, 3, 119, 73, -45, 53, 54, 23, 58, 117, 15, -1, -10, 125, -73, -125, -70, 0, -45, 20, 127, 93, 68, 89, 69, -58, -66, -19, 36, 117, 56, 1, -85, -125, 124, -81, -118, 88, -113, 32, 21, -76, -36, 101, 39, -85, 23, 32, -115, -12, 30, 118, -103, -106, -113, -79, 10, -46, -68, 96, 90, 90, 60, -81, 63, 70, 1, -102, -61, -38, -23, -97, 52, -118, -127, -21, -15, 52, 84, -36, 67, 79, -17, -12, 27, -88, -79, 112, 106, -1, 13, 27, 107, 111, 39, 113, 60, -75, 10, 107, 101, 88, 52, 95, 49, 14, -119, -79, -1, -76, 18, 18, -69, -64, 95, -39, -41, -114, -126, -75, 92, -100, -83, -125, -113, 17, -109, 101, -43, 59, 15, 87, 75, 47, -7, 15, -71, -23, -96, 123, -107, 49, 24, 15, 63, 109, 107, 112, -113, -101, -69, -99, 109, -112, 33, 43, -47, 73, -84, -48, -93, 75, 100, 98, 85, 67, -125, -59, -118, -25, 46, -118, -101, 8, -73, 110, -56, 74, 100, 121, -112, 26, 86, -48, -65, 1, -12, 84, 90, -103, -65, -4, 29, -123, -16, -54, -121, -100, 35, 55, 93, -61, -99, -124, 104, -44, 9, -118, 122, -81, -41, -82, 37, -6, -51, 87, -80, -36, 50, 12, 74, -71, 55, 120, 59, 15, 78, 96, 76, 102, -4, -15, -103, -45, 29, 60, 73, -6, -37, 125, 118, -68, 3, -35, 113, 98, -22, 3, 109, -102, -30, -7, 116, -55, 96, 1, -54, -126, 67, 20, -93, -122, 70, -128, 91, -43, -123, -18, 109, -35, -56, 112, -74, -116, 102, -75, 97, -56, -112, -119, -44, -79, -58, 96, -66, -33, 60, 54, -92, -113, -1, -34, -104, -51, 94, 67, 42, 97, 78, -12, -30, -12, 13, 83, 70, 28, 114, 111, -122, 79, -111, -69, -61, 80, 35, 57, -3, -117, -59, 76, -29, -78, -70, -24, 94, 86, 52, -112, -30, 118, 43, 112, 98, 102, -97, 108, -99, -39, 84, -46, -31, 42, 117, 91, 34, 41, -17, -23, -38, -101, 43, -61, -124, -2, 65, 95, -74, -57, -77, -48, -19, -111, -60, 14, -9, 107, 64, 37, 74, 111, 104, 97, 93, -68, 100, -33, 33, -17, 59, 10, 5, 119, 0, 62, -118, -60, -31, -87, 120, -63, 94, -72, -95, 28, 102, -112, -69, 85, 6, -21, 42, -124, -11, -109, 13, -49, -50, -1, -15, 80, 8, -53, -83, -9, -1, 15, 7, -34, 19, -102, -125, 50, 46, -50, -47, -123, -47, 83, 18, 72, -1, -63, 28, -2, 41, 29, 14, -37, -22, -111, 77, 72, 106, -78, 115, -108, 27, -39, 105, -4, 108, -96, -46, -59, -20, -88, -95, -19, 93, -76, -46, -38, 30, -91, 33, 8, -24, 73, -42, -91, 42, -75, 19, 27, 82, -81, -105, -37, 67, 71, 45, -74, -75, 108, -56, 16, 84, -101, 15, 87, -107, -38, -62, 77, 83, 49, -116, 89, -2, 46, 106, -121, 17, -50, -125, 16, -68, 17, 92, -49, -96, 50, 57, -76, 29, 119, -100, -56, 14, 64, 89, 26, -103, 26, -91, 13, 58, -117, -28, 126, -29, 123, 14, -22, 112, -1, 26, 43, -3, 60, -126, -56, -87, 39, -49, 76, -57, 61, 127, -30, 37, -6, -62, 33, 34, -109, -30, -67, 117, -5, -49, -55, 108, 23, 29, 14, 109, -20, 20, 79, 19, 110, -47, 87, 49, 113, 55, 3, 28, -60, 78, -123, 87, 85, -70, -18, -87, 112, 116, 49, -34, 3, 115, 71, -127, -60, -72, -51, -117, 0, -42, -41, -48, -49, -92, 23, -74, -96, 60, -51, -67, 53, 4, -88, 65, -2, -28, -67, -98, -84, -122, -37, -4, 68, 113, 21, -14, 16, 15, 38, 67, -32, -125, 93, -18, 34, 59, 54, 55, 116, -111, 69, 57, 62, -101, -63, 89, -76, -69, 83, -77, -55, 43, 58, 53, -22, 66, -19, 91, -36, -64, 35, 5, -40, 93, 78, -4, -101, 77, 5, -25, -93, 24, -111, -69, -88, -56, 18, 24, -107, 23, 103, -20, 12, -84, -20, -45, 18, 65, -115, -128, -67, -26, -96, 8, -47, -92, -85, -22, 97, 68, 127, -65, -25, 87, -106, -94, -84, -119, 114, -13, 45, -119, -128, -58, 16, -58, 22, 82, -94, 108, 103, -8, 39, -58, 98, 73, -69, -28, 38, -60, -104, 17, -116, 120, 51, 15, 69, 121, -35, 37, -127, -80, 81, 76, 102, 45, -21, -33, -118, -123, 74, -46, -49, 40, -28, 98, -76, -12, 40, -62, -3, 106, 86, -123, 115, 109, 104, 17, -90, -15, -83, -96, -74, 97, 54, 49, 10, 68, 107, -101, -48, -100, 0, 83, -4, 86, -84, 59, -56, 1, -112, 40, 26, -6, -32, 28, -59, -25, -100, -43, -28, -109, 89, 4, -78, -116, -62, 21, -36, 79, -110, -113, 37, 50, -128, 8, 5, -82, 114, 32, 74, -57, 14, 82, -48, -78, -73, -26, -98, -6, 23, 82, -37, -65, 123, 79, 9, -45, 10, -82, -47, -17, 79, 125, 98, -118, -5, 77, -52, -25, -117, 108, -77, 50, 83, -92, -57, -21, -120, -30, 10, 86, -1, -72, -8, -85, -33, 82, -31, -21, 76, 18, -70, -47, -1, -52, 101, 72, 73, -3, 71, -5, 97, -34, -121, 68, 39, 33, 73, 37, -90, 93, -28, 81, 118, -102, 103, -93, 76, 97, 65, -92, 105, 43, 54, -113, 1, 87, -112, -26, -122, -87, 93, -2, -50, 54, 15, -3, -120, 92, 51, 61, 112, 118, 84, 104, -12, 39, -53, -97, -50, -77, -124, -115, 124, 7, -96, -96, 102, 62, -32, -37, 47, 123, -54, -119, -122, -75, 49, 120, -49, -68, -79, 82, -113, 47, -4, -82, -73, 118, 73, 104, -1, -23, 49, -87, 118, 93, 41, -24, -29, -106, -101, -41, 12, 74, -77, -113, 24, -22, -47, -12, 30, -29, -73, 119, 0, -12, 13, 41, -7, 32, 8, 39, -13, -52, 95, -73, -65, 26, 120, -113, -54, 65, -99, -16, 126, -128, -12, 26, 113, -113, -7, -111, -60, -78, -77, 42, 35, 113, -117, 120, -23, -19, 28, 28, -12, -84, -107, 21, 74, 48, 42, 63, -41, 45, -109, -120, -42, -47, -94, -8, -45, 66, 25, 90, -125, -98, -39, -39, -28, -71, -125, 118, 110, 102, -28, 44, -97, 22, -70, 70, -9, 8, 7, 57, 27, 96, 20, -126, -107, 14, 45, -69, 40, 79, 21, 22, -42, 46, 28, 125, -122, -109, -33, 12, -24, -19, -65, -38, 45, -6, -37, 99, -37, 106, 19, -35, 71, 86, -96, -115, -73, 27, -4, -29, 77, 13, -90, -75, -22, -70, -43, 17, 6, -30, -26, 37, 20, -106, -110, 108, -24, 72, 14, 75, 66, -97, -78, -78, 35, -68, 3, 27, -36, -33, 75, -31, 114, 23, 127, -48, 115, 30, 26, 63, 48, -108, 24, -2, 4, -59, 70, -113, 18, 6, -12, 4, -12, -85, 2, 65, -118, -18, 49, -110, 95, -108, 34, 58, 48, -89, 5, 42, -32, 29, 93, -105, 35, 51, 75, -71, 33, 105, 36, 102, -124, -60, 53, 50, 79, 32, 27, -70, 20, 35, -60, 13, 9, 101, 54, -11, 110, -100, 108, 96, 101, -72, 81, -84, 40, -19, -119, -84, 98, -127, -30, 13, -82, 0, -25, 39, 107, -85, -43, 103, -128, -101, 22, -117, 75, -115, 111, 126, 107, 107, 77, -27, 76, 81, -128, 112, -86, -62, -55, -87, 9, -126, 12, 68, -4, 60, 87, 15, 79, -73, 114, -110, 42, 101, -124, 5, -94, 5, 35, -74, -96, 53, -100, 11, -30, -40, 3, -78, -45, 72, 126, -12, 69, -63, -8, 84, -21, -96, -20, 121, -43, -34, 76, 118, 53, -20, -92, 60, 52, -62, -82, 102, 53, -113, 10, 52, -78, 66, -7, -63, -127, -97, 59, 18, -4, -41, 104, -109, 62, 117, -123, 36, -24, -19, -116, -16, 7, -62, 26, -13, -11, -39, -83, 78, -37, 67, 112, -103, 24, -107, -76, 109, 25, -73, 78, -19, -81, -6, 80, 22, -14, 107, -114, 110, -62, 45, -121, -31, 6, -25, 17, -58, -7, 7, 120, -98, 24, -126, -42, -96, 10, 87, 60, -57, 100, -51, 41, -67, -7, -107, 96, 127, 12, 75, -126, -39, 99, -1, -66, 55, 87, 31, -19, 40, 76, 47, 42, -18, -95, -66, 41, 112, 25, -4, 90, 7, -69, -108, 74, 69, -116, 8, 84, 64, -30, -5, -95, -110, -122, 81, -38, 18, -94, -18, 5, 111, 86, -71, -98, 113, 120, 62, 57, 46, 12, -65, -3, 0, 84, -50, 74, -127, 67, 67, -48, 73, -70, 12, -65, -69, -79, -7, -62, 84, -20, 60, 0, 78, 56, 92, -46, -106, 101, 70, -45, -66, -49, 84, -61, -49, 119, -96, -100, -49, -80, 35, -116, -44, 14, 16, 88, 58, -51, 56, -64, -98, 97, 107, 105, 79, -88, 118, -111, -50, -57, -115, -113, -16, 87, 65, 85, 126, -88, 106, 127, 89, -6, -28, 118, -103, 108, -43, 19, 115, -119, 68, 6, 110, 20, 87, 39, -127, 47, -64, 34, 68, 84, -28, -36, 74, 99, 76, 47, 12, -93, -62, 32, -106, -104, -61, -67, 55, -52, 59, 42, 125, -120, 27, -1, -99, 49, 110, 55, -15, 91, -62, 93, 96, 110, 21, 49, 86, 37, -45, -75, 17, 28, -5, 11, 45, 12, 82, -75, 73, 70, 59, 106, 19, 50, 49, -65, -57, 57, 50, 62, -68, 114, 4, -103, 69, 6, -108, -94, 35, 96, -88, -21, 0, 105, -126, -51, -65, 104, 81, 16, 57, -32, 126, 65, 59, 26, 53, 21, 102, 96, -42, 59, 53, 66, -98, 12, -91, 52, -87, 102, -34, 44, -125, 80, 49, 14, -83, -119, 32, 48, 32, 100, -62, 101, 102, 84, -67, 13, 122, 60, -97, 13, 3, -87, -68, -113, -23, -83, 85, 60, -21, -43, -50, 53, 50, -68, -73, 5, 84, -109, -36, 13, 51, -40, 117, -38, -99, -44, 42, -37, -44, -116, 30, -13, -17, -2, -65, -35, 8, 111, -112, 20, -94, -37, -99, 80, -41, 90, -120, 91, 60, 13, 29, 111, -13, 99, 107, -115, -126, 53, 60, 89, -51, 36, 97, 16, 85, -110, 91, 51, 124, -111, 102, 103, -3, 23, 93, 49, 6, 99, 11, 11, -57, -47, -45, 121, -23, -4, 117, -92, 44, 116, 93, 41, 96, -37, 96, -93, -122, 87, 27, -18, 24, -104, 106, 91, 109, 112, 70, -87, 124, 98, -120, -59, 53, -81, -80, -112, -126, 84, -19, -125, 112, 112, -28, -53, 28, -70, -12, 115, -13, 113, 84, -96, 118, -18, -83, 16, 5, -41, 103, -72, 53, -65, -52, 22, -32, 116, 33, -60, -106, 126, 106, -27, 97, -120, 11, -73, 74, 11, 125, 116, -95, 70, -39, -25, -54, -128, -43, 20, -123, 78, -93, -39, -128, 13, 89, -100, -21, -79, -107, 19, 96, -85, 24, 104, -94, 34, -51, -1, 93, -60, -102, 94, -60, 79, 29, 72, 95, 99, -54, 71, -79, -24, -121, -82, -7, -90, -103, -33, 67, -22, -40, -71, -23, -50, 123, 104, -34, 74, 19, -79, -42, -39, 41, -22, -61, 30, 17, -81, 119, 37, -76, -62, 40, 45, -49, -107, -36, -35, 22, 48, -125, -61, 102, -11, -29, -11, 84, 113, 7, 107, 114, -63, -100, 20, -10, 101, -34, 91, 21, 26, 30, 106, 118, -2, -121, -26, 20, 57, 68, 35, 61, -21, -2, -12, -83, -93, -19, -59, -62, -17, -126, -88, 60, 28, -45, 40, -118, 36, 74, -66, 78, 25, 92, -60, -121, -30, 14, -3, -73, -29, -78, 115, -112, -32, -116, 13, 51, 33, -121, -17, 6, -72, 47, 47, 82, 105, 64, 93, 125, -65, 30, 24, -48, -84, 87, -85, 92, 75, 23, -113, -109, -61, -78, 26, -39, 89, 73, 81, -49, -56, -73, -72, -32, 60, -90, -39, 55, 25, 88, 4, -53, -107, -93, 115, 44, 58, 82, -104, -56, -75, -103, 108, 22, -106, 79, 105, -111, -119, 121, -95, 14, -100, -21, 76, -10, 25, -92, -97, 119, 22, -77, -68, -4, -68, 96, 98, -115, -15, -108, 123, -109, -86, 81, -8, 108, -21, -71, -71, 58, 64, -93, -84, 66, -128, -68, 66, -41, -64, 50, -84, 83, -41, 127, -8, 69, -97, -1, 108, -115, 124, -88, 118, -57, 30, 107, 77, 27, 43, -34, -34, 101, -27, -16, -43, -45, -108, 0, -10, -30, -53, -117, -116, 92, 23, -84, 32, -67, 9, 36, -3, -83, -100, 113, -40, 95, -36, -114, -120, -79, -122, -8, 36, -5, 3, 88, 29, -98, 46, 9, -50, -6, -28, 8, -121, -12, 42, 118, 1, 16, 23, 50, -32, -70, -113, 46, -116, -115, 101, 91, -26, 21, 75, -69, -55, 36, -38, 29, -84, 46, 120, 61, -121, -82, 23, -39, -84, -23, -13, -55, 95, 1, -96, -59, -108, -99, 0, 96, -103, -20, 118, -46, -63, 83, -118, 91, 7, -22, 2, -80, 98, -116, -35, -121, -59, 79, 49, 20, 94, -109, 87, -128, -33, -124, 20, -120, 15, -33, 113, 122, -64, 56, 12, 71, 89, 61, 84, -47, -27, 9, 67, 4, -109, -45, -94, 67, -83, 51, -29, -112, 16, -75, 88, -85, 16, -100, 29, -102, 81, 123, -123, -28, 95, -127, -121, -63, 11, -24, 8, 33, -35, -7, -63, 98, -29, -61, 38, -67, 9, 47, -102, 112, 70, 11, -97, -120, -31, -4, 78, -53, 52, 62, 74, 57, -57, -99, 54, 92, -102, 52, -122, -58, 67, 86, -20, -22, 87, 68, 107, 49, -11, -114, 102, 72, -107, -99, -74, 7, -20, -72, 107, -29, -108, -36, 43, -126, -36, -34, -25, 4, 69, 121, -47, 90, -21, -34, -43, -13, 47, 43, 48, 89, 6, -32, -33, -54, -61, 62, 79, -112, -31, -89, 88, 114, -87, 116, -97, 3, 54, 100, 73, 121, -112, -6, 73, 6, -47, -5, 109, -1, -72, 99, -90, -103, 18, 74, 17, -51, 43, 77, 37, 76, 49, -100, 19, 126, -25, -17, -61, 109, -51, -95, -68, -70, -48, 31, 97, 25, 89, 96, 22, -125, -48, 71, 17, 24, -120, 46, -32, -127, -29, 22, 57, -26, 14, -123, -118, -113, -4, 33, 16, -1, -13, 95, 57, 110, -26, -82, 37, 49, 79, 124, -20, -44, -64, 15, -74, 56, 25, 1, 106, 121, 35, -21, -122, 69, 57, 111, 31, 21, 51, 23, -58, -87, -97, -70, -97, 120, -112, -44, -38, 116, 37, -82, -63, -101, 90, 100, 123, 12, -61, -113, -96, -59, 111, 98, 99, 72, 54, -71, -2, 105, -96, 36, -4, -119, 13, 22, -81, -15, 48, 80, -16, -114, -97, 22, 106, -37, -37, 17, -1, -121, -110, 100, 60, 15, 59, -11, -73, -7, 29, -114, 109, 10, 102, 101, -94, 64, -109, 64, -105, 54, 43, -100, 70, 107, 17, 7, 11, 68, 0, 65, -128, -111, -73, 115, 98, 3, -49, -15, -69, -17, 9, 7, -20, 95, 52, 14, 28, 103, 86, 18, 13, 96, 40, -57, -115, -126, -112, 73, 62, 93, 87, -43, 8, 71, -4, 108, -105, 93, 29, -55, -96, 69, 21, -6, -46, -91, 123, 68, 8, 9, 120, -9, 103, 95, -126, 28, -46, 31, -86, 72, 91, 60, -73, 119, -72, -106, -32, 45, 124, 105, 71, 119, -71, -105, -25, -57, 49, -111, 42, -92, 58, 38, -117, 65, 78, -105, -109, -103, -124, 97, 67, 28, 101, 75, -40, -55, -112, -74, -110, 86, 74, 111, 2, -51, -65, -44, 64, 80, -30, 13, 65, 21, 30, 28, 1, 86, 6, 27, 121, -121, 8, -31, -111, -85, -61, 55, -124, -38, -46, 23, 90, -10, -96, -36, -37, 41, 85, 67, -41, -103, -16, -63, 73, -92, -102, -24, -71, 50, 106, -51, -50, 93, 56, -55, 47, -78, 96, -1, -34, -16, 90, -73, -128, 118, 89, -28, 87, 81, 22, 106, -77, 27, 76, 54, -50, -117, 77, -43, -120, 9, 112, 50, 20, -80, -18, -96, 74, -29, 91, 78, -23, 1, -27, 24, 28, -108, 73, 25, -43, -63, 66, 120, -116, -113, 45, -102, 94, 1, 23, 73, 25, 117, 45, 69, -45, 59, 35, -127, 96, -22, 106, 117, 84, -112, 93, 64, 106, -56, 7, 86, 85, -18, 118, -28, -32, 14, 94, -113, 85, -35, -98, 82, 0, 87, 43, -8, -99, -91, -26, -76, -111, -45, 122, -35, -53, 127, -28, -19, -113, -15, 75, 36, 110, -99, 83, -127, -100, 98, 55, -60, -103, -6, 55, 36, 50, 48, 98, 33, -107, -54, -47, -127, 87, -13, -9, -61, 98, 50, -18, 36, 94, 69, -69, 49, -116, -26, -70, -65, -127, -110, -9, -2, -7, 30, -51, -4, -46, -3, -63, 116, 120, -13, -3, 113, -114, -46, 10, 41, -88, 65, -39, 18, -95, -24, 75, 77, -35, 73, 89, 70, -79, 102, 14, 28, -74, -59, -55, -46, 53, 106, -67, -128, -68, 56, 106, -106, 30, 106, 95, -38, 113, 5, 51, 101, -20, 27, -31, -85, -88, -24, -4, 102, 17, -70, -92, -122, -40, 7, 0, 119, -74, -4, -69, 123, -127, 101, -35, 75, 39, 110, -48, 26, -58, 89, -11, 14, 15, -113, 21, 61, 126, 10, 2, 0, 6, -114, 124, -116, 123, 124, 110, 90, -7, -126, -54, 76, -26, 127, -110, -7, 29, -95, -17, -39, -80, 111, 98, 105, 39, 59, -97, -58, -34, -55, 106, 28, 56, 119, -52, -43, -71, 103, -127, 34, 9, -82, 70, 73, -29, -17, 37, -112, 20, 26, 118, -76, -65, -39, 117, 76, -20, -33, -113, -84, 67, 77, 103, -117, -58, 2, 48, 35, 100, 122, -44, 123, -10, 15, -61, 91, 25, -105, 69, -102, -82, -67, -108, -96, -51, -62, -91, 102, 62, 73, -6, -22, -56, -29, 40, -96, 89, -16, -28, -111, 34, -113, 12, 10, 46, -30, 10, -92, 76, -40, 118, -38, -36, -88, -99, -56, 48, -17, 67, -8, -122, -47, -123, -40, -4, -120, 39, 29, 68, -54, -48, -9, 23, 13, -25, -24, -29, -43, 11, 102, 105, 106, 79, -47, -103, 109, 12, -99, -97, 108, -18, 65, -79, -75, 16, 114, 84, -3, 112, 12, 5, -66, 85, 76, -36, 63, -14, 59, 46, 12, 38, -119, 103, 68, -124, 68, -61, 52, -22, 36, -124, -14, 20, 11, -60, 112, 62, 34, -124, 126, -21, -65, 62, 80, -52, 30, 73, 72, 2, -34, 11, -53, -74, -45, -8, 57, -44, -73, -97, -16, -62, 34, -56, 39, -117, -34, 107, 89, 59, 20, -100, -2, -107, 21, -75, -35, -92, 82, 115, 81, -107, -24, -54, -77, 8, -73, 93, 93, 81, 67, 26, 13, -122, 120, -29, -78, 67, 104, -27, -52]";
//        String s = "[0, 0, 0, -105, 101, 21, 9, -63, -64, 120, -84, -22, 43, -123, 55, -83, -112, 30, -31, 106, 67, 55, 68, -40, -33, 66, -9, 33, 47, 74, -39, 88, 13, -4, -26, -62, -18, -17, 5, 55, 2, 72, 71, -28, -81, -4, -49, 4, 93, 94, 19, 40, 115, -12, 15, -12, -81, -30, -93, -3, 26, 67, -18, 30, -21, 79, 62, -31, 111, 74, -78, -51, 4, 30, -109, -86, 106, 52, 59, -15, 66, -104, 49, -47, -122, -120, -79, -59, 107, 34, 118, -79, 80, 64, -48, -23, -13, -29, 98, 18, -77, -125, 57, 14, 32, -79, -5, 99, -66, 10, 89, 78, 48, -41, 127, 73, -3, 64, -60, -124, -37, -95, 54, -82, -88, 10, -118, -58, 125, -98, 24, 29, -110, 100, 25, 29, -101, 68, 77, 57, 89, 124, 60, -35, -95, 77, 61, -94, -48, 61, 98]";
//        String s1 = "  Hex stream: 00 00 00 05 51 00 00 00 27 2a 9d 81 b3 47 d1 98 65 fc a3 de 6f ec 25 e9 70 c4 60 85 21 31 a6 41 f2 23 3a 60 8c a4 5d b6 57 e3 d7 17 00 00 00 0d 1f 6b e8 1e fe ac 11 7e 63 00 00 00 05 51";
//        String s2 = "  Hex stream: 00 00 00 05 51 00 00 00 33 2a 2d 09 c3 79 d6 2a 40 90 03 d3 cd 91 24 8e 00 71 4a ec af 9f d3 be 51 c1 12 e3 be ec 64 be 70 71 30 f9 ec df 73 9b 9a 7d cc 8a 51 8f bf 22 00 00 00 05 51";
//        String s3 = "  Hex stream: 00 00 00 33 2a 03 a2 5d 1f ba 82 e6 5b 2d 5a 81 44 0f 65 36 3c 00 86 48 76 70 46 4c 00 1f 9c fa dd f3 27 13 83 2b 1e 71 bc 7c 3c 40 5f 14 cc 2f a1 26 9c";
        byte[] data = getByteArray(s);
        byte[] data2 = getByteArray(s2);
//        byte[] data2 = getByteArray(s2);
//        byte[] data3 = getByteArray(s3);
//        System.out.println(data1.length);
//        System.out.println(data2.length);
//        System.out.println(data3.length);
        System.out.println(decodeInt(data2, 5));


//        findShort(data);
//        buildPacket(data);
//        stringifyData(data);
//        deserialize(data);
//        bruteforce(data);
        decrype(data);
    }

    /*
[0, 0, 0, -97, 101, 108, -94, 0, -44, -48, 41, 45, -117, 13, -61, 42, -61, 59, 21, 3, 9, -114, -85, -109, -5, -19, 123, -56, 102, -69, -101, 121, -24, -73, -23, 0, 99, -114, 88, 26, 18, -32, 97, 98, 41, 107, 30, -68, 45, -50, -66, -26, -80, -22, -94, 10, 85, 14, 89, 75, -22, -105, 94, -35, -27, -81, 39, 68, -112, -95, 111, 106, 86, 85, 80, -3, 54, -10, 73, 50, -92, -111, 13, 29, -117, -7, -48, 96, 19, 103, 57, -32, -91, -103, 97, 121, 56, -4, -59, 55, 127, 48, 1, -70, -103, 86, -91, 66, 98, 53, 2, 28, -128, -30, 39, 15, -31, 103, 41, -59, 16, 94, -76, 122, 15, -99, -1, -60, 44, -113, 23, -85, 83, 84, -21, -108, 16, 54, 97, -12, -100, 31, 2, -35, -47, 41, -119, -13, 101, 13, 40, -17, -51, -1, -77, 126, -25, 34, 120]
Buffer exploded: 15/159
CREATE_SUCCESS
CREATE_SUCCESS : 5/159
[0, 0, 0, -97, 101, 21, 8, 26, -122, 120, -84, -22, 43, -123, 47, -83, -112, 30, -31, 106, 67, 55, 68, -40, -33, 66, -9, 33, 47, 66, -39, 88, 13, -4, -95, -62, -18, -17, 5, 55, 2, 72, 52, -23, -13, -6, -60, 29, 99, 11, 32, 38, 109, -7, 6, -21, -121, -56, -117, -6, 25, 87, -29, 1, -97, 103, 13, -2, 69, 96, -83, -20, 36, 106, -98, -86, 90, 85, 63, -18, 116, -72, 34, -28, -122, -86, -66, -59, 107, 6, 79, -104, 100, 106, -63, -35, -19, -43, 98, 19, -99, -97, 57, 13, 29, -113, -4, 96, -83, 44, 89, 79, 35, -57, 125, 73, -37, 59, -26, -121, -67, -79, 56, -91, -118, 125, -97, -50, 109, -82, 31, 11, -89, 68, 92, 48, -12, 101, 73, 37, 88, 39, 60, -22, -73, 51, 53, -97, -54, 7, 115, 60, 25, -72, -38, -110, 119, -107, 89]
    * */

    public void decrype(byte[] data) {
        System.out.println(Arrays.toString(data));
        RC4 rc4 = new RC4(RotMGRC4Keys.INCOMING_STRING);

        int i = 0;
        while (i < 2000000) {
            RC4 rcopy = rc4.fork();
            byte[] dcopy = Arrays.copyOfRange(data, 5, data.length);
            rcopy.decrypt(dcopy);
            int int1 = decodeInt(dcopy, 0);
            int int2 = decodeInt(dcopy, 4);
            int short1 = decodeShort(dcopy, 8);
            if (int1 == 352852614) {
                System.out.printf("%d %d %d %d\n", i, int1, int2, short1);
            }
            rc4.getXor();
            i++;
        }
    }

    public void findShort(byte[] data) {
        for (int i = 5; i < data.length; i++) {
            float f1 = decodeFloat(data, i);
            float f2 = decodeFloat(data, i + 4);
            byte b = data[i + 8];
            int c = readCompressedInt(data, i + 9);
            if (
//                    realFloatValue(f1) &&
                    realFloatValue(f2)
//                    c > 0 && c < 1000
            ) {
                System.out.println("----");
                System.out.printf("i:%d\n", i);
                System.out.printf("pos:(%f, %f)\n", f1, f2);
                System.out.printf("level:%d\n", b);
                System.out.printf("tiles:%d\n", c);
            }
        }
    }

    boolean realFloatValue(float f) {
        return f < 0 ? (f < -0.0001f && f > -10000f) : (f > 0.0001f && f < 10000f);
    }

    public int readUnsignedByte(byte[] bytes, int offset) {
        return Byte.toUnsignedInt(bytes[offset]);
    }

    public int readCompressedInt(byte[] bytes, int offset) {
        int uByte = readUnsignedByte(bytes, offset);
        boolean isNegative = (uByte & 64) != 0;
        int shift = 6;
        int value = uByte & 63;

        int i = offset + 1;
        while ((uByte & 128) != 0) {
            uByte = readUnsignedByte(bytes, i);
            value |= (uByte & 127) << shift;
            shift += 7;
            i++;
        }

        if (isNegative) {
            value = -value;
        }
        return value;
    }

    public static short decodeShort(byte[] bytes, int offset) {
        return (short) ((Byte.toUnsignedInt(bytes[0 + offset]) << 8) | Byte.toUnsignedInt(bytes[1 + offset]));
    }

    public static float decodeFloat(byte[] bytes, int offset) {
        int asInt = (bytes[0 + offset] & 0xFF)
                | ((bytes[1 + offset] & 0xFF) << 8)
                | ((bytes[2 + offset] & 0xFF) << 16)
                | ((bytes[3 + offset] & 0xFF) << 24);
        return Float.intBitsToFloat(asInt);
    }

    public static int decodeInt(byte[] bytes, int offset) {
        return (Byte.toUnsignedInt(bytes[0 + offset]) << 24) | (Byte.toUnsignedInt(bytes[1 + offset]) << 16) | (Byte.toUnsignedInt(bytes[2 + offset]) << 8) | Byte.toUnsignedInt(bytes[3 + offset]);
    }

    public void buildPacket(byte[] data) {
        RawPacket packet = RawPacket.newPacket(data, null);

        try {
            EthernetPacket ethernetPacket = packet.getNewEthernetPacket();
            if (ethernetPacket != null) {
                Ip4Packet ip4packet = ethernetPacket.getNewIp4Packet();
                Ip4Packet assembledIp4packet = Ip4Defragmenter.defragment(ip4packet);
                if (assembledIp4packet != null) {
                    TcpPacket tcpPacket = assembledIp4packet.getNewTcpPacket();
                    if (tcpPacket != null) {
                        System.out.println(tcpPacket);
                        System.out.println(tcpPacket.getPayload().length);
                    }
                }
            }
        } catch (ArrayIndexOutOfBoundsException | IllegalArgumentException | NullPointerException e) {
            Util.print(e.getMessage());
            Util.print(Arrays.toString(packet.getPayload()));
            e.printStackTrace();
        }
    }

    public void testRingbuff() {
        RingBuffer<Integer> ringBuffer = new RingBuffer(32);
        int test;
        for (test = 0; test < 16; test++) {
            System.out.println("push: " + test);
            ringBuffer.push(test);
        }
        for (int i = 0; i < 15; i++) {
            System.out.println("pop : " + ringBuffer.pop());
        }

        for (; test < (16 + 32); test++) {
            System.out.println("push: " + test);
            ringBuffer.push(test);
        }
        for (int i = 0; i < 34; i++) {
            System.out.println("pop : " + ringBuffer.pop());
        }
    }

    public void bruteforce(byte[] data) {
        int size = Util.decodeInt(data);
        int type = data[4];
        for (int i = 0; i < 5000; i++) {
//            System.out.println("------start " + i + " -----");
            ByteBuffer bb = createBuffer(data);
            bb.position(5);
            Packet p = getPacket(type);
//            System.out.println(PacketType.byClass(p) + " " + type);
            try {
                BufferReader br = new BufferReader(bb);
                for (int j = 0; j < i; j++) {
                    br.readByte();
                }
                p.deserialize(br);
                if (!br.isBufferFullyParsed()) {
                    System.out.println(p);
                    continue;
                }
                System.out.println("Parse complete " + i);
                System.out.println(p);
                return;
            } catch (Exception e) {
//                System.out.println("Buffer blew up " + i);
//                e.printStackTrace();
            }
        }
    }

    public void deserialize(byte[] data) {
        int size = Util.decodeInt(data);
        int type = data[4];
        ByteBuffer bb = createBuffer(data);
        bb.position(5);
        Packet p = getPacket(type);
        System.out.println(PacketType.byClass(p) + " " + type);
        try {
            BufferReader br = new BufferReader(bb);
            p.deserialize(br);
            if (!br.isBufferFullyParsed()) {
                System.out.println(p);
                return;
            }
            System.out.println("Parse complete");
            System.out.println(p);
        } catch (Exception e) {
            System.out.println("Buffer blew up");
            e.printStackTrace();
        }
    }

    public void stringify(byte[] data) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < data.length; i++) {
//            sb.append(Integer.toHexString(data[i]));
            sb.append((char) data[i]);
        }
        System.out.println(sb);
    }

    private void errorSimulator() {
        System.out.println("Sta");

        ArrayList<byte[]> list = readFile(incoming);
        boolean first = true;
        int id = 0;
        int counter = 0;
        long sequenseNumber = 0;
        long nextSeq = 0;
        int starting = 0;
        LinkedHashMap<Long, TcpPacket> packetMap = new LinkedHashMap<>();

        RC4 rc4;
        if (incoming) rc4 = new RC4(RotMGRC4Keys.INCOMING_STRING);
        else rc4 = new RC4(RotMGRC4Keys.OUTGOING_STRING);
        TickAligner tickAligner = new TickAligner(rc4);

        for (byte[] b : list) {
            counter++;
            try {
                RawPacket rawPacket = RawPacket.newPacket(b, Instant.now());
                EthernetPacket ether = rawPacket.getNewEthernetPacket();
                Ip4Packet ip4 = ether.getNewIp4Packet();
                TcpPacket tcpPacket = ip4.getNewTcpPacket();
//            EthernetPacket epacket = EthernetPacket.newPacket(b, 0, b.length);
//            IpV4Packet ip4 = epacket.get(IpV4Packet.class);
//            TcpPacket tcpPacket = epacket.get(TcpPacket.class);
//            if (counter >= 0 && counter < 1000) System.out.println(ip4.getIdentification());

//                if(counter > 145) {
//                    packets.packetcapture.networktap.pcap4j.TcpPacket.newPacket(ip4.getPayload(), 0, ip4.getPayloadLength());
//                    System.out.println(tcpPacket);
//                }
                if (tcpPacket.isResetBit()) {
                    packetMap.clear();
//                    sequenseNumber = tcpPacket.getHeader().getSequenceNumber();
                    sequenseNumber = 0;
                    System.out.println("-----------------------------------------------");
                    System.out.println("-----------------------------------------------isFin " + tcpPacket.isFin());
                    System.out.println("-----------------------------------------------isSyn " + tcpPacket.isSyn());
                    System.out.println("-----------------------------------------------isRst " + tcpPacket.isRst());
                    tickAligner.reset();
                    continue;
                }

                id++;
                if (first) id = ip4.getIdentification();
                first = false;

                long currentSeq = tcpPacket.getSequenceNumber();
                if (tcpPacket.getPayload() != null) {
                    nextSeq = tcpPacket.getPayloadSize() + currentSeq;
                }

                if (ip4.isMoreFragmentFlag()) System.out.println("fragmentation");
//                if (counter > starting) System.out.println("Aa: " + sequenseNumber + " " + tcpPacket.getHeader().getSyn());
//                if (counter > starting) {
//                    System.out.println("C: " + currentSeq + " + " + (tcpPacket.getPayload() == null ? 0 : tcpPacket.getPayloadSize()) + " = D: " + nextSeq + "=" + sequenseNumber + " dif: (" + (nextSeq - currentSeq) + ")");
//                }

                if (sequenseNumber == 0) {
                    sequenseNumber = currentSeq;
//                    System.out.println("A: " + sequenseNumber + " " + counter);
                }
                packetMap.put(currentSeq, tcpPacket);
                int size = packetMap.size();
                System.out.println("PACKETMAP " + size + " " + counter + " " + ip4.getIdentification());

//                if (counter >= 410) {
//                    dif = nextSeq - sequenseNumber - (packet.getPayload() == null ? 0 : packet.getPayload().length());
//                    if (packet.getPayload() != null) {
//                        System.out.println("(" + packet.getPayload().length() + "->" + (sequenseNumber == nextSeq) + ")");
//                    } else {
//                        System.out.println("(" + 0 + "->" + (sequenseNumber == nextSeq) + ")");
//                    }
//                }
                while (packetMap.containsKey(sequenseNumber)) {
                    TcpPacket packetSeqed = packetMap.remove(sequenseNumber);
                    if (packetSeqed.getPayload() != null) {
                        sequenseNumber += packetSeqed.getPayloadSize();
//                        if (counter > starting) System.out.println("B: " + sequenseNumber);
                        build(tcpPacket.getPayload(), tickAligner, rc4);
                    }
                }
//                if (packet.getPayload() != null) sequenseNumber += packet.getPayload().length();
            } catch (Exception e) {
                e.printStackTrace();
            }
//            if (counter > starting) System.out.println("END");
        }

        System.out.println("Fin " + packetMap.size() + " " + id + " " + list.size());
    }

    private byte[] bytes = new byte[200000];
    private int index;
    private int pSize = 0;
    private boolean firstNonLargePacket = true;

    public void build(byte[] data, TickAligner tickAligner, RC4 r) {
        if (firstNonLargePacket) {  // start listening after a non-max packet
            // prevents errors in pSize.
            if (data.length < 1460) firstNonLargePacket = false;
            return;
        }
        for (byte b : data) {
            bytes[index++] = b;
            if (index >= 4) {
                if (pSize == 0) {
                    pSize = Util.decodeInt(bytes);
                    if (pSize > 200000) {
                        Util.print("Oversize packet construction.");
                        pSize = 0;
                        return;
                    }
                }

                if (index == pSize) {
                    index = 0;
                    byte[] realmPacket = Arrays.copyOfRange(bytes, 0, pSize);
                    pSize = 0;
                    ByteBuffer packetData = ByteBuffer.wrap(realmPacket).order(ByteOrder.BIG_ENDIAN);
                    int size = packetData.getInt();
                    byte type = packetData.get();
                    if (tickAligner.checkRC4Alignment(packetData, size, type)) {
                        r.skip(size - 5);
                    }
                }
            }
        }
    }

    private ArrayList<byte[]> readFile(boolean incoming) {
        Pattern p = Pattern.compile("  Sequence Number: ([0-9]*)");
//        ArrayList<Pair<Long, Integer>> list = new ArrayList<>();
        ArrayList<byte[]> list2 = new ArrayList<>();
        boolean firstBatch = false;
        try {
            BufferedReader br = new BufferedReader(new FileReader(FILE_NAME));
            String line;
            int i = 0;
            while ((line = br.readLine()) != null) {
                Matcher m = p.matcher(line);
                if (m.matches()) {
//                    list.add(Pair.create(Long.parseLong(m.group(1)), i));
//                    System.out.println(m.group(1));
                }
                i++;
                if (line.startsWith("[")) {
                    firstBatch = true;
                } else if (firstBatch) {
//                    firstBatch = false;
                    return list2;
                }

                String[] splits = line.split(",");
//                if(splits.length > 40){
//                    for(int s = 0; s < splits.length-1; s++){
//                        if(splits[s].equals(" 8") && splits[s+1].equals(" 2")){
//                            System.out.println(s);
//                        }
//                    }
//                }
//                String in = "[4";
//                if(incoming) in = "[5";
                if (splits.length < 37) continue;
                int shift = 2;
                if (incoming) shift = 0;

                boolean isIn = splits[34 + shift].equals(" 8") && splits[35 + shift].equals(" 2");

                if (isIn) {
                    byte[] b = getByteArray(line);
//                    if (computeChecksum(b)) list2.add(b);
//                    else System.out.println("Checksum fail " + i);
                    list2.add(b);
                }
            }

            br.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

        return list2;
    }

    public void stringifyData(byte[] data) {
        int size = data.length;
        ByteBuffer pbuff = createBuffer(data);
        StringBuilder br = new StringBuilder();
        for (int i = 0; i < size - 2; i++) {
            int strLen = pbuff.getShort(i);
            if (strLen < size - i && strLen > 0) {
                System.out.println("string at:" + i + " len:" + strLen);
                for (int j = 0; j < strLen; j++) {
                    System.out.print((char) pbuff.get(i + j + 2));
                }
                System.out.println();
            } else if (strLen == 0) {
                System.out.println("zerostring " + i + " " + strLen);
            }
            br.append((char) data[i]);
        }
        System.out.println(br);
    }

    public static byte[] getByteArray(String byteString) {
        String[] list;
        boolean hex = false;
        if (byteString.contains("Hex stream")) {
            hex = true;
            list = byteString.replace("  Hex stream: ", "").split(" ");
        } else {
            list = byteString.replaceAll("[\\[\\] ]", "").split(",");
        }
        byte[] b = new byte[list.length];
        for (int i = 0; i < list.length - 1; i++) {
            String s = list[i];
            if (hex) {
                b[i] = (byte) ((Character.digit(s.charAt(0), 16) << 4) + Character.digit(s.charAt(1), 16));
            } else {
                b[i] = Byte.parseByte(s);
            }
        }
        return b;
    }

    public ByteBuffer createBuffer(byte[] data) {
        return ByteBuffer.wrap(data).order(ByteOrder.BIG_ENDIAN);
    }

    public Packet getPacket(int type) {
        return PacketType.getPacket(PacketType.byOrdinal(type).getIndex()).factory();
    }
}
