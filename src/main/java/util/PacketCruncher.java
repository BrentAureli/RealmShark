package util;

import packets.Packet;
import packets.PacketType;
import packets.reader.BufferReader;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class PacketCruncher {
    public void crunch() {
//        String s = "[0, 0, 5, -125, 9, 0, 0, 0, 46, 0, 0, 0, -54, 2, -4, -41, 34, 0, -95, 0, 40, -65, -65, 9, 67, 22, -15, 8, 67, 5, -77, 83, 3, 1, -94, 6, 65, 4, -116, 3, 65, 6, 0, 4, 49, 48, 48, 51, 0, -86, -43, 9, 67, 30, -93, 77, 67, 4, -114, 94, 3, 1, -105, 13, 65, 4, -111, 7, 65, 6, 0, 7, 52, 48, 49, 48, 52, 49, 48, 0, -122, -38, 9, 67, 31, 66, 77, 67, 5, 67, -13, 3, 1, -71, 9, 65, 4, -69, 2, 65, 6, 0, 4, 50, 52, 54, 49, 0, -92, -36, 9, 67, 32, 101, 39, 67, 3, -101, -81, 3, 1, -107, 11, 65, 4, -98, 5, 65, 6, 0, 6, 51, 50, 54, 50, 49, 56, 0, -93, -35, 9, 67, 32, 78, -73, 67, 6, 119, -18, 3, 1, -110, 13, 65, 4, -127, 6, 65, 6, 0, 7, 51, 52, 57, 48, 50, 49, 51, 0, -102, -34, 9, 67, 32, -89, 48, 67, 4, 92, 48, 3, 1, -85, 13, 65, 4, -127, 6, 65, 6, 0, 6, 57, 51, 53, 50, 50, 52, 0, -78, -34, 9, 67, 32, 75, -14, 67, 4, -65, 11, 3, 1, -96, 4, 65, 4, -90, 3, 65, 6, 0, 3, 52, 53, 48, 0, -88, -30, 9, 67, 23, -13, -41, 67, 10, 42, -125, 3, 1, -113, 11, 65, 4, -110, 8, 65, 6, 0, 7, 51, 57, 49, 51, 48, 57, 53, 0, -86, -30, 9, 67, 29, 107, -105, 67, 8, -123, 40, 3, 1, -96, 12, 65, 4, -73, 3, 65, 6, 0, 7, 50, 57, 57, 51, 55, 56, 49, 0, -71, -28, 9, 67, 31, -56, -46, 67, 5, 91, 119, 3, 1, -93, 11, 65, 4, -90, 5, 65, 6, 0, 6, 57, 48, 52, 49, 52, 57, 0, -100, -27, 9, 67, 32, 65, -76, 67, 4, -97, 65, 3, 1, -66, 12, 65, 4, -97, 6, 65, 6, 0, 4, 51, 54, 49, 48, 0, -127, -26, 9, 67, 32, 93, -58, 67, 3, -90, 29, 3, 1, -66, 14, 65, 4, -92, 4, 65, 6, 0, 4, 51, 54, 49, 48, 0, -65, -26, 9, 67, 30, -70, 20, 67, 5, 74, 3, 3, 1, -111, 12, 65, 4, -77, 6, 65, 6, 0, 8, 55, 48, 57, 50, 49, 57, 52, 57, 0, -68, -23, 9, 67, 32, -75, -128, 67, 4, -80, 50, 3, 1, -119, 14, 65, 4, -117, 3, 65, 6, 0, 7, 52, 53, 51, 51, 52, 51, 51, 0, -116, -22, 9, 67, 32, -84, 65, 67, 5, 83, 29, 3, 1, -94, 3, 65, 4, -96, 2, 65, 6, 0, 3, 51, 48, 57, 0, -99, -20, 9, 67, 29, 104, 127, 67, 3, -82, -70, 3, 1, -76, 12, 65, 4, -106, 7, 65, 6, 0, 8, 56, 52, 48, 52, 52, 57, 57, 54, 0, -87, -20, 9, 67, 30, -44, 31, 67, 6, -94, 27, 3, 1, -94, 14, 65, 4, -92, 4, 65, 6, 0, 7, 50, 56, 52, 50, 49, 51, 48, 0, -103, -19, 9, 67, 32, 127, -72, 67, 17, -128, 0, 3, 1, -90, 13, 65, 4, -106, 7, 65, 6, 0, 7, 52, 53, 50, 48, 55, 56, 51, 0, -97, -18, 9, 67, 32, -85, 77, 67, 5, -118, -95, 3, 1, -94, 14, 65, 4, -111, 7, 65, 6, 0, 8, 56, 57, 56, 52, 53, 56, 52, 52, 0, -122, -17, 9, 67, 28, -128, 0, 67, 18, -128, 0, 3, 1, -67, 9, 65, 4, -122, 3, 65, 6, 0, 6, 55, 50, 50, 52, 53, 56, 0, -80, -17, 9, 67, 29, 99, 56, 67, 6, 64, -71, 3, 1, -87, 11, 65, 4, -103, 8, 65, 6, 0, 8, 50, 54, 54, 52, 50, 49, 53, 54, 0, -88, -16, 9, 67, 32, -112, 96, 67, 3, -104, -87, 3, 1, -110, 13, 65, 4, -107, 6, 65, 6, 0, 8, 56, 48, 53, 57, 52, 49, 55, 55, 0, -75, -16, 9, 67, 25, 6, 104, 66, -6, 34, 75, 3, 1, -125, 13, 65, 4, -107, 4, 65, 6, 0, 8, 55, 51, 51, 51, 55, 50, 57, 53, 0, -65, -16, 9, 67, 31, -87, -5, 67, 4, 97, 76, 3, 1, -98, 15, 65, 4, -107, 6, 65, 6, 0, 8, 49, 49, 56, 55, 48, 55, 52, 57, 0, -120, -14, 9, 67, 31, 88, -86, 67, 6, -74, -88, 3, 1, -92, 1, 65, 4, -92, 1, 65, 6, 0, 1, 48, 0, -71, -14, 9, 67, 30, -67, -19, 67, 9, 61, -4, 3, 1, -80, 13, 65, 4, -127, 4, 65, 6, 0, 8, 49, 50, 54, 48, 52, 51, 48, 50, 0, -115, -13, 9, 67, 32, 88, 30, 67, 5, 83, -117, 3, 1, -120, 12, 65, 4, -97, 5, 65, 6, 0, 7, 52, 48, 52, 55, 56, 50, 57, 0, -94, -13, 9, 67, 31, -80, -57, 67, 3, -87, -87, 3, 1, -68, 12, 65, 4, -82, 6, 65, 6, 0, 7, 55, 51, 50, 50, 50, 53, 48, 0, -68, -13, 9, 67, 29, -78, -77, 67, 4, -88, -101, 3, 1, -113, 11, 65, 4, -93, 5, 65, 6, 0, 7, 50, 56, 48, 55, 52, 52, 54, 0, -123, -12, 9, 67, 38, 124, 104, 67, 14, 125, -66, 3, 1, -110, 13, 65, 4, -116, 5, 65, 6, 0, 3, 51, 49, 54, 0, -105, -12, 9, 67, 31, -86, 40, 67, 5, 69, -32, 3, 1, -104, 14, 65, 4, -112, 4, 65, 6, 0, 8, 49, 50, 54, 56, 53, 49, 54, 50, 0, -124, -11, 9, 67, 31, 104, -84, 67, 3, -85, 66, 3, 1, -98, 13, 65, 4, -116, 5, 65, 6, 0, 6, 53, 55, 56, 56, 49, 49, 0, -121, -11, 9, 67, 32, 75, 80, 67, 4, -79, 108, 3, 1, -111, 12, 65, 4, -120, 3, 65, 6, 0, 1, 48, 0, -81, -11, 9, 67, 38, -17, -111, 67, 14, -91, 71, 3, 1, -80, 2, 65, 4, -85, 2, 65, 6, 0, 3, 53, 49, 56, 0, -77, -11, 9, 67, 32, -109, -118, 67, 9, -94, -43, 3, 1, -87, 11, 65, 4, -125, 6, 65, 6, 0, 8, 50, 50, 48, 50, 54, 55, 48, 48, 0, -71, -11, 9, 67, 31, -10, -73, 67, 4, 33, 82, 3, 1, -124, 14, 65, 4, -68, 3, 65, 6, 0, 7, 52, 54, 57, 54, 50, 56, 54, 0, -121, -10, 9, 67, 30, -88, 1, 67, 5, -78, -100, 3, 1, -86, 7, 65, 4, 35, 65, 6, 0, 7, 50, 48, 57, 52, 52, 54, 57, 0, -119, -10, 9, 67, 31, -81, -15, 67, 4, -123, 111, 3, 1, -126, 12, 65, 4, -128, 8, 65, 6, 0, 8, 50, 48, 50, 52, 54, 56, 57, 57, 0, -117, -10, 9, 67, 29, 117, 64, 67, 4, -104, -99, 28, 0, -128, 12, 65, 1, -128, 12, 65, 4, -91, 5, 65, 6, 0, 7, 52, 54, 53, 52, 50, 51, 52, 0, 8, -123, 42, 65, 9, -77, 40, 65, 10, -78, 48, 65, 11, -115, 43, 65, 12, -98, 48, 65, 13, -88, -115, 1, 65, 14, -123, 44, 65, 15, -117, 43, 65, 16, -72, 120, 65, 17, -78, 120, 65, 18, 65, 65, 19, 65, 65, 21, 37, 65, 26, 51, 65, 27, -110, 1, 65, 38, 0, 16, 53, 55, 57, 57, 48, 54, 48, 52, 57, 49, 50, 48, 54, 54, 53, 54, 0, 46, -116, 2, 65, 49, 12, 65, 51, 11, 65, 52, 7, 65, 80, 0, 11, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 116, -94, 40, 6, 117, -93, 40, 6, 120, -128, 25, 65, -116, -10, 9, 67, 29, 117, 64, 67, 4, -104, -99, 18, 2, 60, 65, 25, -118, -85, 2, 65, 81, -115, 1, 65, 82, 0, 8, 74, 97, 108, 97, 112, 101, 110, 111, 0, 83, -91, -3, 3, 65, 84, 3, 65, 85, -102, 1, 65, 86, 0, 0, 87, -96, -29, 28, 65, 88, -118, -117, 28, 65, 89, -102, -37, 10, 65, 90, -102, 1, 65, 91, -103, 1, 65, 92, -115, 1, 65, 93, -104, 6, 65, 94, -105, 6, 65, 95, -107, 6, 65, 114, -117, -10, 9, 65]";
        String s = "[0, 0, 0, -109, 62, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 1, 3, 30, -95, -31, 12, 67, 29, -115, 76, 67, 5, -88, -26, 30, 56, 1, 65, 3, -127, 3, 65, 30, 26, 65, 0, -112, 12, 65, 1, -86, 9, 65, 2, -92, 1, 65, 7, 20, 65, 8, -124, 42, 65, 9, -117, 40, 65, 10, -95, 49, 65, 11, -84, 40, 65, 29, 0, 65, 31, 0, 6, 71, 97, 122, 108, 111, 119, 0, 32, 0, 65, 33, 0, 65, 39, -91, -120, 2, 65, 57, -91, 12, 65, 59, 65, 65, 62, 0, 0, 0, 63, 65, 65, 25, -83, -82, 2, 65, 99, 0, 65, 101, -117, -63, 9, 65, 102, -88, 15, 65, 103, -88, 15, 65, 111, 0, 65, 112, 0, 65, 46, -112, 1, 65, 47, 0, 65, 28, 27, 65, 0]";
        byte[] data = getByteArray(s);
        ByteBuffer pbuff = createBuffer(data);
        Packet p = getPacket(62);
        stringifyData(data);
        int size = data.length;
        for (int i = 0; i < size - 2; i++) {
            int strLen = pbuff.getShort(i);
            if (strLen < size - i && strLen > 0) {
                System.out.println(i + " " + strLen + " " + pbuff.get(i-1));
                for (int j = 0; j < strLen; j++) {
                    System.out.print((char) pbuff.get(i+j+2));
                }
                System.out.println();
            }
        }
        deserialize(data);
    }

    public byte[] getByteArray(String byteString) {
        String[] list = byteString.replaceAll("[\\[\\] ]", "").split(",");
        byte[] b = new byte[list.length];
        int i = 0;
        for (String s : list) {
            b[i++] = Byte.parseByte(s);
        }
        return b;
    }

    public ByteBuffer createBuffer(byte[] data) {
        return ByteBuffer.wrap(data).order(ByteOrder.BIG_ENDIAN);
    }

    public Packet getPacket(int type) {
        return PacketType.getPacket(PacketType.byOrdinal(type).getIndex()).factory();
    }

    public void deserialize(byte[] data) {
        int size = Util.decodeInt(data);
        int type = data[4];
        ByteBuffer bb = createBuffer(data);
        bb.position(5);
        Packet p = getPacket(type);
        System.out.println(size);
        try {
            BufferReader br = new BufferReader(bb);
            p.deserialize(br);
            if (!br.isBufferFullyParsed()) System.out.println("Not finished " + (br.size() - br.getIndex()));
        } catch (Exception e) {
            System.out.println("Buffer blew up");
//            e.printStackTrace();
        }
        System.out.println(p);
    }

    public void stringifyData(byte[] data) {
        StringBuilder sb = new StringBuilder();
//        StringBuilder sb2 = new StringBuilder();
//        StringBuilder sb3 = new StringBuilder();
        for (int i = 0; i < data.length; i++) {
//            sb.append(Integer.toHexString(data[i]));
            sb.append((char) data[i]);
        }
        System.out.println(sb);
//        Util.print(sb2.toString());
//        Util.print(sb3.toString());
    }

    public static void main(String[] args) {
        new PacketCruncher().crunch();
    }
}
