// automatically generated by the FlatBuffers compiler, do not modify

package assets.flattbuffer;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Sprite extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static Sprite getRootAsSprite(ByteBuffer _bb) { return getRootAsSprite(_bb, new Sprite()); }
  public static Sprite getRootAsSprite(ByteBuffer _bb, Sprite obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Sprite __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Position maskPosition() { return maskPosition(new Position()); }
  public Position maskPosition(Position obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public Position position() { return position(new Position()); }
  public Position position(Position obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public int unknown() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int id() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public Color color() { return color(new Color()); }
  public Color color(Color obj) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public boolean unknown2() { int o = __offset(14); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public String name() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  public long unknown3() { int o = __offset(18); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createSprite(FlatBufferBuilder builder,
      int maskPositionOffset,
      int positionOffset,
      int unknown,
      int id,
      int colorOffset,
      boolean unknown2,
      int nameOffset,
      long unknown3) {
    builder.startTable(8);
    Sprite.addUnknown3(builder, unknown3);
    Sprite.addName(builder, nameOffset);
    Sprite.addColor(builder, colorOffset);
    Sprite.addId(builder, id);
    Sprite.addUnknown(builder, unknown);
    Sprite.addPosition(builder, positionOffset);
    Sprite.addMaskPosition(builder, maskPositionOffset);
    Sprite.addUnknown2(builder, unknown2);
    return Sprite.endSprite(builder);
  }

  public static void startSprite(FlatBufferBuilder builder) { builder.startTable(8); }
  public static void addMaskPosition(FlatBufferBuilder builder, int maskPositionOffset) { builder.addOffset(0, maskPositionOffset, 0); }
  public static void addPosition(FlatBufferBuilder builder, int positionOffset) { builder.addOffset(1, positionOffset, 0); }
  public static void addUnknown(FlatBufferBuilder builder, int unknown) { builder.addInt(2, unknown, 0); }
  public static void addId(FlatBufferBuilder builder, int id) { builder.addInt(3, id, 0); }
  public static void addColor(FlatBufferBuilder builder, int colorOffset) { builder.addOffset(4, colorOffset, 0); }
  public static void addUnknown2(FlatBufferBuilder builder, boolean unknown2) { builder.addBoolean(5, unknown2, false); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(6, nameOffset, 0); }
  public static void addUnknown3(FlatBufferBuilder builder, long unknown3) { builder.addLong(7, unknown3, 0L); }
  public static int endSprite(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Sprite get(int j) { return get(new Sprite(), j); }
    public Sprite get(Sprite obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

